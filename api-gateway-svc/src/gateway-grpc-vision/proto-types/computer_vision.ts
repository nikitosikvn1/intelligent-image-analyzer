// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.15.8
// source: src/gateway-grpc-vision/proto/computer_vision.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "computer_vision";

export enum ModelType {
  BLIP = 0,
  BLIP_QUANTIZED = 1,
  UNRECOGNIZED = -1,
}

export interface ImgProcRequest {
  image: Uint8Array;
  model: ModelType;
}

export interface ImgProcResponse {
  description: string;
}

export const COMPUTER_VISION_PACKAGE_NAME = "computer_vision";

export interface ComputerVisionClient {
  processImage(request: ImgProcRequest): Observable<ImgProcResponse>;

  processImageBatch(request: Observable<ImgProcRequest>): Observable<ImgProcResponse>;
}

export interface ComputerVisionController {
  processImage(request: ImgProcRequest): Promise<ImgProcResponse> | Observable<ImgProcResponse> | ImgProcResponse;

  processImageBatch(request: Observable<ImgProcRequest>): Observable<ImgProcResponse>;
}

export function ComputerVisionControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["processImage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ComputerVision", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["processImageBatch"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ComputerVision", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COMPUTER_VISION_SERVICE_NAME = "ComputerVision";
